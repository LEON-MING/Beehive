***REMOVED*** IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
***REMOVED*** It is recommended to regenerate this file in the future when you upgrade to a 
***REMOVED*** newer version of cucumber-rails. Consider adding your own code to a new file 
***REMOVED*** instead of editing this one. Cucumber will automatically load all features/**/*.rb
***REMOVED*** files.

require 'cucumber/rails'

***REMOVED*** Capybara defaults to XPath selectors rather than Webrat's default of CSS3. In
***REMOVED*** order to ease the transition to Capybara we set the default here. If you'd
***REMOVED*** prefer to use XPath just remove this line and adjust any selectors in your
***REMOVED*** steps to use the XPath syntax.
Capybara.default_selector = :css

***REMOVED*** By default, any exception happening in your Rails application will bubble up
***REMOVED*** to Cucumber so that your scenario will fail. This is a different from how 
***REMOVED*** your application behaves in the production environment, where an error page will 
***REMOVED*** be rendered instead.
***REMOVED***
***REMOVED*** Sometimes we want to override this default behaviour and allow Rails to rescue
***REMOVED*** exceptions and display an error page (just like when the app is running in production).
***REMOVED*** Typical scenarios where you want to do this is when you test your error pages.
***REMOVED*** There are two ways to allow Rails to rescue exceptions:
***REMOVED***
***REMOVED*** 1) Tag your scenario (or feature) with @allow-rescue
***REMOVED***
***REMOVED*** 2) Set the value below to true. Beware that doing this globally is not
***REMOVED*** recommended as it will mask a lot of errors for you!
***REMOVED***
ActionController::Base.allow_rescue = false

***REMOVED*** Remove/comment out the lines below if your app doesn't have a database.
***REMOVED*** For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

***REMOVED*** You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
***REMOVED*** See the DatabaseCleaner documentation for details. Example:
***REMOVED***
***REMOVED***   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
***REMOVED***     DatabaseCleaner.strategy = :truncation, {:except => %w[widgets]}
***REMOVED***   end
***REMOVED***
***REMOVED***   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
***REMOVED***     DatabaseCleaner.strategy = :transaction
***REMOVED***   end
***REMOVED***
